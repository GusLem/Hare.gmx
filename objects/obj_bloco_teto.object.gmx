<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bloco</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_bloco_segue</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_yscale = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(1);
exit;

var spr = get_spr_bloco();
if !surface_exists(surf) {
var w = sprite_width;
var h = sprite_height/2 - 12;
var sw = sprite_get_width(spr);
var sh = sprite_get_height(spr);
    surface_free(surf);
    surf = surface_create(sw,sh);
var cor = c_white;
draw_set_colour(cor);
surface_set_target(surf);
texture_set_repeat(true);
    //desenha fundo
    var tex = sprite_get_texture(spr,3);
    var tw = texture_get_texel_width(tex)*(w-sw*2);
    var th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(0+sw,0+sh,+ptx,0);
        draw_vertex_texture(0+w-sw,0+sh,tw+ptx,0);
        draw_vertex_texture(0+sw,0+h,+ptx,th);
        draw_vertex_texture(0+w-sw,0+h,tw+ptx,th);
    draw_primitive_end();    
    
    
    //desenha parte de cima
    tex = sprite_get_texture(spr,1);
    tw = texture_get_texel_width(tex)*(w-sw*2);
    th = texture_get_texel_height(tex)*sh;
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(0+sw,0+0,ptx,0);
        draw_vertex_texture(0+w-sw,0+0,tw+ptx,0);
        draw_vertex_texture(0+sw,0+sh,ptx,th);
        draw_vertex_texture(0+w-sw,0+sh,tw+ptx,th);
    draw_primitive_end();    
    
    
    //desenha canto &lt;&lt;&lt;
    tex = sprite_get_texture(spr,2);
    tw = texture_get_texel_width(tex)*sw;
    th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(0+0,0+sh,0,0);
        draw_vertex_texture(0+sw,0+sh,tw,0);
        draw_vertex_texture(0+0,0+h,0,th);
        draw_vertex_texture(0+sw,0+h,tw,th);
    draw_primitive_end();   
    
    //desenha canto &gt;&gt;&gt;
    tex = sprite_get_texture(spr,2);
    tw = texture_get_texel_width(tex)*sw;
    th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(0+w-sw-4,0+sh,tw,0);
        draw_vertex_texture(0+w-4,0+sh,0,0);
        draw_vertex_texture(0+w-sw-4,0+h,tw,th);
        draw_vertex_texture(0+w-4,0+h,0,th);
    draw_primitive_end();    
    
    

    //desenha parte de baixo
    tex = sprite_get_texture(spr,1);
    tw = texture_get_texel_width(tex)*(w-sw*2);
    th = texture_get_texel_height(tex)*sh;
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(0+sw,0+h,ptx,0);
        draw_vertex_texture(0+w-sw,0+h,tw+ptx,0);
        draw_vertex_texture(0+sw,0+sh+h,ptx,-th);
        draw_vertex_texture(0+w-sw,0+sh+h,tw+ptx,-th);
    draw_primitive_end();    
    
    
    
    //desenha cantos cantos baixo
    draw_sprite_ext(spr,0,0,0,1,1,0,cor,1);
    draw_sprite_ext(spr,0,0+w-4,0,-1,1,0,cor,1);
    
    
    //desenha cantos cantos cima
    draw_sprite_ext(spr,0,0,0+h+sh,1,-1,0,cor,1);
    draw_sprite_ext(spr,0,0+w-4,0+h+sh,-1,-1,0,cor,1);
    
surface_reset_target();
texture_set_repeat(false);
}
draw_surface(surf,x,y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spr = get_spr_bloco();
var w = sprite_width;
var h = sprite_height/2 - 12;
var sw = sprite_get_width(spr);
var sh = sprite_get_height(spr);

var cor = c_white;
draw_set_colour(cor);

texture_set_repeat(true);


    //desenha fundo
    var tex = sprite_get_texture(spr,3);
    var tw = texture_get_texel_width(tex)*(w-sw*2);
    var th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(x+sw,y+sh,+ptx,0);
        draw_vertex_texture(x+w-sw,y+sh,tw+ptx,0);
        draw_vertex_texture(x+sw,y+h,+ptx,th);
        draw_vertex_texture(x+w-sw,y+h,tw+ptx,th);
    draw_primitive_end();    
    
    
    //desenha parte de cima
    
    tex = sprite_get_texture(spr,1);
    tw = texture_get_texel_width(tex)*(w-sw*2);
    th = texture_get_texel_height(tex)*sh;
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(x+sw,y+0,ptx,0);
        draw_vertex_texture(x+w-sw,y+0,tw+ptx,0);
        draw_vertex_texture(x+sw,y+sh,ptx,th);
        draw_vertex_texture(x+w-sw,y+sh,tw+ptx,th);
    draw_primitive_end();    
    
    
    //desenha canto &lt;&lt;&lt;
    tex = sprite_get_texture(spr,2);
    tw = texture_get_texel_width(tex)*sw;
    th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(x+0,y+sh,0,0);
        draw_vertex_texture(x+sw,y+sh,tw,0);
        draw_vertex_texture(x+0,y+h,0,th);
        draw_vertex_texture(x+sw,y+h,tw,th);
    draw_primitive_end();   
    
    //desenha canto &gt;&gt;&gt;
    tex = sprite_get_texture(spr,2);
    tw = texture_get_texel_width(tex)*sw;
    th = texture_get_texel_height(tex)*(h-sh);
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(x+w-sw-4,y+sh,tw,0);
        draw_vertex_texture(x+w-4,y+sh,0,0);
        draw_vertex_texture(x+w-sw-4,y+h,tw,th);
        draw_vertex_texture(x+w-4,y+h,0,th);
    draw_primitive_end();    
    

    //desenha parte de baixo
    tex = sprite_get_texture(spr,1);
    tw = texture_get_texel_width(tex)*(w-sw*2);
    th = texture_get_texel_height(tex)*sh;
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        draw_vertex_texture(x+sw,y+h,ptx,0);
        draw_vertex_texture(x+w-sw,y+h,tw+ptx,0);
        draw_vertex_texture(x+sw,y+sh+h,ptx,-th);
        draw_vertex_texture(x+w-sw,y+sh+h,tw+ptx,-th);
    draw_primitive_end();    
    
    
    //desenha cantos cantos baixo
    draw_sprite_ext(spr,0,x,y,1,1,0,cor,1);
    draw_sprite_ext(spr,0,x+w-4,y,-1,1,0,cor,1);
    
    
    //desenha cantos cantos cima
    draw_sprite_ext(spr,0,x,y+h+sh,1,-1,0,cor,1);
    draw_sprite_ext(spr,0,x+w-4,y+h+sh,-1,-1,0,cor,1);


texture_set_repeat(false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
